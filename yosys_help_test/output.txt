
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.17+41 (git sha1 c525b5f91, clang 10.0.0-4ubuntu1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: counter/debounce.sv
Parsing SystemVerilog input from `counter/debounce.sv' to AST representation.
Storing AST representation for module `$abstract\debounce'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: counter/debounce_top.sv
Parsing SystemVerilog input from `counter/debounce_top.sv' to AST representation.
Storing AST representation for module `$abstract\debounce_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: counter/mod_counter.sv
Parsing SystemVerilog input from `counter/mod_counter.sv' to AST representation.
Storing AST representation for module `$abstract\mod_counter'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\debounce_top'.
Generating RTLIL representation for module `\debounce_top'.

5.1. Analyzing design hierarchy..
Top module:  \debounce_top

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\debounce'.
Generating RTLIL representation for module `\debounce'.

5.3. Analyzing design hierarchy..
Top module:  \debounce_top
Used module:     \debounce

5.4. Analyzing design hierarchy..
Top module:  \debounce_top
Used module:     \debounce

5.5. Analyzing design hierarchy..
Top module:  \debounce_top
Used module:     \debounce
Removing unused module `$abstract\mod_counter'.
Removing unused module `$abstract\debounce_top'.
Removing unused module `$abstract\debounce'.
Removed 3 unused modules.

6. Executing PROC pass (convert processes to netlists).

6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$counter/debounce.sv:0$21 in module debounce.
Marked 10 switch rules as full_case in process $proc$counter/debounce.sv:0$21 in module debounce.
Marked 1 switch rules as full_case in process $proc$counter/debounce_top.sv:62$16 in module debounce_top.
Marked 1 switch rules as full_case in process $proc$counter/debounce_top.sv:44$9 in module debounce_top.
Removed a total of 1 dead cases.

6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 10 assignments to connections.

6.4. Executing PROC_INIT pass (extract init attributes).

6.5. Executing PROC_ARST pass (detect async resets in processes).

6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~14 debug messages>

6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\debounce.$proc$counter/debounce.sv:90$30'.
Creating decoders for process `\debounce.$proc$counter/debounce.sv:0$21'.
     1/14: $10\ns[1:0]
     2/14: $9\ns[1:0]
     3/14: $8\ns[1:0]
     4/14: $7\ns[1:0]
     5/14: $6\ns[1:0]
     6/14: $5\ns[1:0]
     7/14: $4\ns[1:0]
     8/14: $3\ns[1:0]
     9/14: $2\ns[1:0]
    10/14: $2\debounced[0:0]
    11/14: $2\clrTimer[0:0]
    12/14: $1\ns[1:0]
    13/14: $1\clrTimer[0:0]
    14/14: $1\debounced[0:0]
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:62$16'.
     1/1: $0\noisyCount[6:0]
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:57$13'.
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:55$12'.
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:44$9'.
     1/1: $0\debouncedCount[6:0]
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:39$6'.
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:37$5'.
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:31$3'.
Creating decoders for process `\debounce_top.$proc$counter/debounce_top.sv:29$1'.

6.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\debounce.\debounced' from process `\debounce.$proc$counter/debounce.sv:0$21'.
No latch inferred for signal `\debounce.\clrTimer' from process `\debounce.$proc$counter/debounce.sv:0$21'.
No latch inferred for signal `\debounce.\ns' from process `\debounce.$proc$counter/debounce.sv:0$21'.

6.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\debounce.\cs' using process `\debounce.$proc$counter/debounce.sv:90$30'.
  created $dff cell `$procdff$164' with positive edge clock.
Creating register for signal `\debounce_top.\noisyCount' using process `\debounce_top.$proc$counter/debounce_top.sv:62$16'.
  created $dff cell `$procdff$165' with positive edge clock.
Creating register for signal `\debounce_top.\F4' using process `\debounce_top.$proc$counter/debounce_top.sv:57$13'.
  created $dff cell `$procdff$166' with positive edge clock.
Creating register for signal `\debounce_top.\F3' using process `\debounce_top.$proc$counter/debounce_top.sv:55$12'.
  created $dff cell `$procdff$167' with positive edge clock.
Creating register for signal `\debounce_top.\debouncedCount' using process `\debounce_top.$proc$counter/debounce_top.sv:44$9'.
  created $dff cell `$procdff$168' with positive edge clock.
Creating register for signal `\debounce_top.\F2' using process `\debounce_top.$proc$counter/debounce_top.sv:39$6'.
  created $dff cell `$procdff$169' with positive edge clock.
Creating register for signal `\debounce_top.\F1' using process `\debounce_top.$proc$counter/debounce_top.sv:37$5'.
  created $dff cell `$procdff$170' with positive edge clock.
Creating register for signal `\debounce_top.\buttonPush [1]' using process `\debounce_top.$proc$counter/debounce_top.sv:31$3'.
  created $dff cell `$procdff$171' with positive edge clock.
Creating register for signal `\debounce_top.\buttonPush [0]' using process `\debounce_top.$proc$counter/debounce_top.sv:29$1'.
  created $dff cell `$procdff$172' with positive edge clock.

6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `debounce.$proc$counter/debounce.sv:90$30'.
Found and cleaned up 10 empty switches in `\debounce.$proc$counter/debounce.sv:0$21'.
Removing empty process `debounce.$proc$counter/debounce.sv:0$21'.
Found and cleaned up 2 empty switches in `\debounce_top.$proc$counter/debounce_top.sv:62$16'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:62$16'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:57$13'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:55$12'.
Found and cleaned up 2 empty switches in `\debounce_top.$proc$counter/debounce_top.sv:44$9'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:44$9'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:39$6'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:37$5'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:31$3'.
Removing empty process `debounce_top.$proc$counter/debounce_top.sv:29$1'.
Cleaned up 14 empty switches.

6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module debounce.
<suppressed ~8 debug messages>
Optimizing module debounce_top.
<suppressed ~2 debug messages>

7. Executing BLIF backend.

8. Executing Verilog backend.

8.1. Executing BMUXMAP pass.

8.2. Executing DEMUXMAP pass.
Dumping module `$paramod$af89ed8d08c8018cd41487cbf58ed920a4905fc9\mod_counter'.

9. Executing BLIF backend.

End of script. Logfile hash: 6e65476c8e, CPU: user 0.01s system 0.01s, MEM: 15.19 MB peak
Yosys 0.17+41 (git sha1 c525b5f91, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 62% 1x tcl (0 sec), 9% 4x write_blif (0 sec), ...
